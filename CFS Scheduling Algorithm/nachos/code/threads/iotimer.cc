#include "copyright.h"
#include "iotimer.h"
#include "main.h"
#include "sysdep.h"

//----------------------------------------------------------------------
// Timer::Timer
//      Initialize a hardware timer device.  Save the place to call
//	on each interrupt, and then arrange for the timer to start
//	generating interrupts.
//
//      "doRandom" -- if true, arrange for the interrupts to occur
//		at random, instead of fixed, intervals.
//      "toCall" is the interrupt handler to call when the timer expires.
//----------------------------------------------------------------------

IoTimer::IoTimer(bool doRandom, CallBackObj *toCall)
{
  randomize = doRandom;
  callOnDue = toCall;
  disable = FALSE;
  stats = kernel->stats;
}

//----------------------------------------------------------------------
// Timer::CallBack
//      Routine called when interrupt is generated by the hardware 
//	timer device.  Schedule the next interrupt, and invoke the
//	interrupt handler.
//----------------------------------------------------------------------
void
IoTimer::CallBack()
{
  // invoke the Nachos interrupt handler for this device
   callOnDue->CallBack();

  //SetInterrupt();	// do last, to let software interrupt handler
        // decide if it wants to disable future interrupts
}

//----------------------------------------------------------------------
// Timer::SetInterrupt
//      Cause a timer interrupt to occur in the future, unless
//	future interrupts have been disabled.  The delay is either
//	fixed or random.
//----------------------------------------------------------------------

void
IoTimer::SetInterrupt(int TotalTicks, int type)
{
  if (!disable) {
    int delay = TimerTicks;

    if (randomize) {
      delay = 1 + (RandomNumber() % (TimerTicks * 2));
    }
    // schedule the next io interrupt
    if (type == 0) { // write event
      kernel->interrupt->Schedule(this, TotalTicks - stats->totalTicks, IoIntWrite);
    }
    else {
      kernel->interrupt->Schedule(this, TotalTicks - stats->totalTicks, IoIntRead);
    }
  }
}
